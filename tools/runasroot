#!/bin/bash

# A graphical front end for su(do).

dlg ()
{
	yad --window-icon=system-lock-screen --geometry=500 "$@"
}

# Error dialog
dlg_e ()
{
	dlg --title "Error" --image=gtk-dialog-error --button=gtk-ok --text "$1"
}

# Create a temp file that sets $XAUTHORITY, $DISPLAY and executes the actual command.
create_tmp_script ()
{
	tmp_script=$(mktemp /tmp/runasroot.XXXXXXXXX)
	printf "\
     #!/bin/bash
     export DISPLAY='$DISPLAY'
     [[ -z \$XAUTHORITY ]] && export XAUTHORITY='$XAUTHORITY'
     exec \"\$@\"" >> $tmp_script
	chmod +x $tmp_script
}		

enable_root_connect_to_x ()
{
	which xhost &>/dev/null && xhost +
}

disable_root_connect_to_x ()
{
	which xhost &>/dev/null && xhost -
}	

if [[ -z "$1" ]]; then
	echo "Usage: $0 [command]"
	exit 0
fi

if [[ $EUID == 0 ]]; then
	exec "$@"
fi

if which sudo &>/dev/null; then
	while true; do
		prompt="$(sudo -Sk true < /dev/null 2>&1)"
		pw="$(dlg --entry --hide-text --text "$prompt" --image=dialog-password --title "Authorization required")" || exit 254
		if ! echo "$pw" | sudo -S bash -c '[[ $EUID == 0 ]]'; then
			dlg_e "The installer could not start. Please verify your password is correct and that you have sudo rights and then try again."
		else
			create_tmp_script
			enable_root_connect_to_x
			echo "$pw" | sudo -S $tmp_script "$@"
			errorlevel=$?
			disable_root_connect_to_x
			exit $?
		fi
	done
else
	terminal_command=$(terminal-emulator)
	if [[ $? != 0 ]]; then
		dlg_e "A suitable terminal emulator could not be found! Please execute the required command from a terminal emulator."
	else
		create_tmp_script
		enable_root_connect_to_x
		$terminal_command su_wrapper $tmp_script "$@"
		errorlevel=$?
		disable_root_connect_to_x
		exit $?
	fi
fi
